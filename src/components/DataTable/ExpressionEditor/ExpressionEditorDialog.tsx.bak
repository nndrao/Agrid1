import React, { useState, useRef } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Search, Play, Save, HelpCircle, X, BookOpen, Code, List, Zap } from 'lucide-react';
import { ExpressionEditorProps, ExpressionType, FunctionDefinition } from './types';
import { ExpressionEditor } from './ExpressionEditor';
import { getFunctionsByCategory, functionCategories, coreFunctions } from './functions';
import { cn } from '@/lib/utils';
import { Separator } from '@/components/ui/separator';
import { Badge } from '@/components/ui/badge';
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";

const operators = {
  arithmetic: [
    { label: '+', value: '+' },
    { label: '-', value: '-' },
    { label: '*', value: '*' },
    { label: '/', value: '/' },
    { label: '%', value: '%' },
  ],
  comparison: [
    { label: '=', value: '=' },
    { label: '!=', value: '!=' },
    { label: '>', value: '>' },
    { label: '<', value: '<' },
    { label: '>=', value: '>=' },
    { label: '<=', value: '<=' },
  ],
  logical: [
    { label: 'AND', value: 'AND' },
    { label: 'OR', value: 'OR' },
    { label: 'NOT', value: 'NOT' },
  ],
};

export function ExpressionEditorDialog({
  open,
  onClose,
  onSave,
  columnDefs,
  initialExpression
}: ExpressionEditorProps) {
  const [expression, setExpression] = useState<ExpressionType>('boolean');
  const [name, setName] = useState(initialExpression?.name || '');
  const [code, setCode] = useState(initialExpression?.expression || '');
  const [selectedCategory, setSelectedCategory] = useState<string>(functionCategories[0]);
  const [functionSearch, setFunctionSearch] = useState('');
  const [columnSearch, setColumnSearch] = useState('');
  const [selectedFunction, setSelectedFunction] = useState<FunctionDefinition | null>(null);
  const [hoveredFunction, setHoveredFunction] = useState<FunctionDefinition | null>(null);
  const [selectedColumn, setSelectedColumn] = useState<string | null>(null);
  const [activeTab, setActiveTab] = useState<string>("functions");
  const editorRef = useRef<HTMLTextAreaElement>(null);

  const handleSave = () => {
    if (!name.trim()) return;
    onSave({
      id: initialExpression?.id || crypto.randomUUID(),
      name,
      type: expression,
      expression: code,
      description: '',
      category: 'custom',
      createdAt: initialExpression?.createdAt || new Date(),
      updatedAt: new Date()
    });
  };

  const handleOperatorClick = (operator: string) => {
    const editor = editorRef.current;
    if (!editor) return;

    const start = editor.selectionStart;
    const end = editor.selectionEnd;
    const spaced = ` ${operator} `;
    const newValue = code.substring(0, start) + spaced + code.substring(end);

    setCode(newValue);

    setTimeout(() => {
      if (editor) {
        editor.focus();
        editor.selectionStart = editor.selectionEnd = start + spaced.length;
      }
    }, 0);
  };

  const handleColumnClick = (col: any) => {
    setSelectedColumn(col.field);

    const editor = editorRef.current;
    if (!editor) return;

    const start = editor.selectionStart;
    const end = editor.selectionEnd;
    const columnRef = `product.${col.field}`;
    const newValue = code.substring(0, start) + columnRef + code.substring(end);

    setCode(newValue);

    setTimeout(() => {
      if (editor) {
        editor.focus();
        editor.selectionStart = editor.selectionEnd = start + columnRef.length;
      }
    }, 0);
  };

  const handleFunctionClick = (fn: FunctionDefinition) => {
    setSelectedFunction(fn);

    const editor = editorRef.current;
    if (!editor) return;

    const params = fn.parameters.map(p => p.name).join(', ');
    const functionCall = `${fn.name}(${params})`;

    const start = editor.selectionStart;
    const end = editor.selectionEnd;
    const newValue = code.substring(0, start) + functionCall + code.substring(end);

    setCode(newValue);

    setTimeout(() => {
      if (editor) {
        editor.focus();
        const cursorPos = start + fn.name.length + 1;
        editor.selectionStart = editor.selectionEnd = cursorPos;
      }
    }, 0);
  };

  const filteredFunctions = getFunctionsByCategory(selectedCategory).filter(
    fn => fn.name.toLowerCase().includes(functionSearch.toLowerCase())
  );

  const filteredColumns = columnDefs.filter(
    col => (col.headerName || col.field).toLowerCase().includes(columnSearch.toLowerCase())
  );

  return (
    <Dialog open={open} onOpenChange={onClose}>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Expression Editor</DialogTitle>
          <DialogDescription>Create and edit expressions for data manipulation</DialogDescription>
        </DialogHeader>

        <div className="flex items-center justify-between">
          <div className="flex items-center gap-2">
            <Badge variant="outline">
              {expression === 'boolean' ? 'Boolean' :
               expression === 'value' ? 'Value' :
               expression === 'formatting' ? 'Formatting' :
               expression === 'aggregatedBoolean' ? 'Aggregated' : 'Observable'}
            </Badge>
            <Input
              value={name}
              onChange={(e) => setName(e.target.value)}
              placeholder="Expression name"
            />
          </div>
          <div className="flex items-center gap-2">
            <Button variant="secondary">
              <Play className="mr-2 h-4 w-4" />
              Run
            </Button>
            <Button variant="outline" onClick={handleSave}>
              <Save className="mr-2 h-4 w-4" />
              Save
            </Button>
            <Button variant="ghost" size="icon">
              <HelpCircle className="h-4 w-4" />
            </Button>
            <Button variant="ghost" size="icon" onClick={onClose}>
              <X className="h-4 w-4" />
            </Button>
          </div>
        </div>

        <div className="flex flex-col space-y-2">
          <div className="text-sm font-medium">Operators</div>
          <div className="flex flex-wrap gap-1">
            {operators.arithmetic.map(op => (
              <Button
                key={op.value}
                variant="outline"
                size="sm"
                onClick={() => handleOperatorClick(op.value)}
              >
                {op.label}
              </Button>
            ))}
            <Separator orientation="vertical" />
            {operators.comparison.map(op => (
              <Button
                key={op.value}
                variant="outline"
                size="sm"
                onClick={() => handleOperatorClick(op.value)}
              >
                {op.label}
              </Button>
            ))}
            <Separator orientation="vertical" />
            {operators.logical.map(op => (
              <Button
                key={op.value}
                variant="outline"
                size="sm"
                onClick={() => handleOperatorClick(op.value)}
              >
                {op.label}
              </Button>
            ))}
          </div>
        </div>

        <div className="grid grid-cols-12 gap-4">
          <div className="col-span-3">
            <Tabs defaultValue="functions" value={activeTab} onValueChange={setActiveTab}>
                <TabsList className="grid w-full grid-cols-2">
                  <TabsTrigger value="functions">
                    <Code className="mr-2 h-4 w-4" />
                    Functions
                  </TabsTrigger>
                  <TabsTrigger value="columns">
                    <List className="mr-2 h-4 w-4" />
                    Columns
                  </TabsTrigger>
                </TabsList>

              <TabsContent value="functions">
                <div className="space-y-4 mt-4">
                  <div className="relative">
                    <Search className="absolute left-2 top-2.5 h-4 w-4 text-muted-foreground" />
                    <Input
                      placeholder="Search functions..."
                      value={functionSearch}
                      onChange={(e) => setFunctionSearch(e.target.value)}
                      className="pl-8"
                    />
                  </div>
                  <Select
                    value={selectedCategory}
                    onValueChange={setSelectedCategory}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select category" />
                    </SelectTrigger>
                    <SelectContent>
                      {functionCategories.map((category) => (
                        <SelectItem key={category} value={category}>
                          {category.charAt(0).toUpperCase() + category.slice(1)}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                <ScrollArea className="h-[300px] mt-4">
                  <div className="space-y-1">
                    {filteredFunctions.map((fn) => (
                      <div
                        key={fn.name}
                        className={cn(
                          "flex flex-col p-2 rounded-md cursor-pointer",
                          "hover:bg-accent hover:text-accent-foreground",
                          selectedFunction?.name === fn.name && "!bg-accent !text-accent-foreground"
                        )}
                        onClick={() => handleFunctionClick(fn)}
                        onMouseEnter={() => setHoveredFunction(fn)}
                        onMouseLeave={() => setHoveredFunction(null)}
                      >
                        <div className="flex items-center justify-between">
                          <div className="flex items-center gap-1.5">
                            <div className="w-1.5 h-1.5 rounded-full bg-primary/50" />
                            <span className="text-sm font-medium">{fn.name}</span>
                          </div>
                          <Badge variant="outline" className="text-xs">{fn.returnType}</Badge>
                        </div>
                        <span className="text-xs text-muted-foreground mt-1 pl-3">
                          {fn.description.substring(0, 30)}...
                        </span>
                      </div>
                    ))}
                  </div>
                </ScrollArea>
              </TabsContent>

              <TabsContent value="columns">
                <div className="relative mt-4">
                  <Search className="absolute left-2 top-2.5 h-4 w-4 text-muted-foreground" />
                  <Input
                    placeholder="Search columns..."
                    value={columnSearch}
                    onChange={(e) => setColumnSearch(e.target.value)}
                    className="pl-8"
                  />
                </div>
                <ScrollArea className="h-[300px] mt-4">
                  <div className="space-y-1">
                    {filteredColumns.map((col) => (
                      <div
                        key={col.field}
                        className={cn(
                          "flex flex-col p-2 rounded-md cursor-pointer",
                          "hover:bg-accent hover:text-accent-foreground",
                          selectedColumn === col.field && "!bg-accent !text-accent-foreground"
                        )}
                        onClick={() => handleColumnClick(col)}
                      >
                        <div className="flex items-center justify-between">
                          <div className="flex items-center gap-1.5">
                            <div className="w-1.5 h-1.5 rounded-full bg-primary/50" />
                            <span className="text-sm font-medium">{col.headerName || col.field}</span>
                          </div>
                          <Badge variant="outline" className="text-xs">{col.type || 'string'}</Badge>
                        </div>
                        <span className="text-xs font-mono text-muted-foreground mt-1 pl-3">
                          {col.field}
                        </span>
                      </div>
                    ))}
                  </div>
                </ScrollArea>
              </TabsContent>
            </Tabs>
          </div>

          <div className="col-span-6">
            <Card>
              <CardHeader>
                <CardTitle>Expression</CardTitle>
              </CardHeader>
              <CardContent>
                <ExpressionEditor
                  value={code}
                  onChange={setCode}
                  columnDefs={columnDefs}
                  className="h-[300px]"
                  ref={editorRef}
                />
              </CardContent>
            </Card>

            {(hoveredFunction || selectedFunction) && (
              <Card className="mt-4">
                <CardHeader>
                  <div className="flex items-center justify-between">
                    <CardTitle>Quick Help</CardTitle>
                    <Badge variant="outline">{(hoveredFunction || selectedFunction).returnType}</Badge>
                  </div>
                </CardHeader>
                <CardContent className="space-y-2">
                  <pre className="bg-muted rounded-md p-2 text-xs font-mono overflow-auto">
                    {(hoveredFunction || selectedFunction).syntax}
                  </pre>
                  <p className="text-xs text-muted-foreground">
                    {(hoveredFunction || selectedFunction).description}
                  </p>
                </CardContent>
              </Card>
            )}
          </div>

          <div className="col-span-3">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center">
                  <BookOpen className="h-4 w-4 mr-2" />
                  Documentation
                </CardTitle>
              </CardHeader>
              <CardContent>
                <ScrollArea className="h-[500px]">
                  {selectedFunction ? (
                    <div className="space-y-4">
                      <div>
                        <div className="flex items-center gap-2 mb-2">
                          <h3 className="font-medium">{selectedFunction.name}</h3>
                          <Badge variant="outline">{selectedFunction.returnType}</Badge>
                        </div>
                        <p className="text-sm text-muted-foreground">{selectedFunction.description}</p>
                      </div>

                      <div>
                        <h4 className="font-medium mb-2">Syntax</h4>
                        <pre className="bg-muted rounded-md p-3 text-sm font-mono overflow-auto">
                          {selectedFunction.syntax}
                        </pre>
                      </div>

                      {selectedFunction.parameters.length > 0 && (
                        <div>
                          <h4 className="font-medium mb-2">Parameters</h4>
                          <div className="space-y-2">
                            {selectedFunction.parameters.map((param: any) => (
                              <div key={param.name} className="border rounded-md p-3">
                                <div className="flex items-center justify-between mb-1">
                                  <span className="font-mono text-sm font-medium">{param.name}</span>
                                  <Badge variant="outline">
                                    {param.type}
                                    {param.optional && " (optional)"}
                                  </Badge>
                                </div>
                                <div className="text-sm text-muted-foreground">
                                  {param.description}
                                </div>
                              </div>
                            ))}
                          </div>
                        </div>
                      )}

                      <div>
                        <h4 className="font-medium mb-2">Example</h4>
                        <pre className="bg-muted rounded-md p-3 text-sm font-mono overflow-auto">
                          {selectedFunction.example}
                        </pre>
                      </div>

                      <div>
                        <h4 className="font-medium mb-2">Usage</h4>
                        <pre className="bg-muted rounded-md p-3 text-sm font-mono overflow-auto">
                          {selectedFunction.name === 'SUM' ?
                            'SUM(product.quantity) > 100' :
                           selectedFunction.name === 'AVERAGE' ?
                            'AVERAGE(product.price) < 50' :
                           selectedFunction.name === 'COUNT' ?
                            'COUNT(product.orders) >= 5' :
                           selectedFunction.name === 'IF' ?
                            'IF(product.price > 100, "Premium", "Standard")' :
                           selectedFunction.name === 'CONCAT' ?
                            'CONCAT(product.firstName, " ", product.lastName)' :
                            `// Example using ${selectedFunction.name}\n${selectedFunction.example}`
                          }
                        </pre>
                      </div>
                    </div>
                  ) : (
                    <div className="flex flex-col items-center justify-center h-full text-center p-4 text-muted-foreground">
                      <BookOpen className="h-10 w-10 mb-2 opacity-20" />
                      <p>Select a function or column to view documentation</p>
                    </div>
                  )
                </ScrollArea>
              </CardContent>
            </Card>
          </div>
        </div>

        <div className="flex items-center justify-between mt-4">
          <div className="text-sm">Expression Type: <span className="font-medium">{expression}</span></div>
          <Badge variant="secondary">Agrid Expression Editor</Badge>
        </div>
      </DialogContent>
    </Dialog>
  );
}